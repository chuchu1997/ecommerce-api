// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// =============================================================================
// ENUMS - Defined at the top for better organization
// =============================================================================
enum Role {
  ADMIN     /// Quản trị viên
  CUSTOMER  /// Khách hàng
  SELLER    /// Người bán hàng
}

enum OrderStatus {
  ORDERED           // Đã đặt hàng
  AWAITING_SHIPMENT // Chờ chuyển phát
  IN_TRANSIT        // Đang trung chuyển
  DELIVERED         // Đã giao đơn hàng
  CANCELED          // Đã hủy
}

enum PaymentMethod {
  COD              // Thanh toán khi nhận hàng
  BANK_TRANSFER    // Chuyển khoản ngân hàng
}
enum SocialType {
  FACEBOOK
  TIKTOK
  ZALO
  YOUTUBE
  SHOPEE
  TIKI
  LAZADA
}
enum PaymentStatus {
  PENDING      // Đang chờ thanh toán
  COMPLETED    // Đã thanh toán
  FAILED       // Thanh toán thất bại
  CANCELED     // Đã hủy thanh toán
}
enum CategoryVariant {
  NEWS //TIN TUC
  COURSES // KHOA HOC
  SERVICES // DICH VU
  PROMOTION // CHUONG TRINH KHUYEN MAI
  CONTACT // LIEN HE 


}


// =============================================================================
// USER MANAGEMENT
// =============================================================================

model User {
  id          Int           @id @default(autoincrement())
  email       String     @unique   /// Email đăng nhập
  password    String                /// Mật khẩu đã hash
  name        String                /// Tên người dùng
  phone       String               /// Số điện thoại (tùy chọn)
  address   String             /// Danh sách địa chỉ giao hàng
  avatar    String?             ///AVATAR
  orders      Order[]               /// Đơn hàng đã đặt
  cart        Cart?                 /// Giỏ hàng hiện tại
  wishlist    Wishlist?             /// Danh sách yêu thích
  reviews     Review[]              /// Các đánh giá sản phẩm
  role        Role       @default(CUSTOMER) /// Vai trò người dùng
  

  stores Store[]
  resetToken String? @unique
  resetTokenExpiry DateTime?
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt


}
// =============================================================================
// STORE MANAGEMENT
// =============================================================================

model Store  {
   id          Int          @id @default(autoincrement())
   name String @unique

   description String?
   userID Int
   user User @relation(fields: [userID],references: [id])

   email String?
   phone String?
   address String?
   logo String?
   favicon String?

   categories Category[] @relation("StoreToCategories")
   products Product[] @relation("StoreToProducts")
   news News[] @relation("StoreToNews")
   banners Banner[] @relation("StoreToBanner")
   socials Social[] @relation("StoreToSocial")

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([userID])
}
model Social {
  id       Int    @id @default(autoincrement())
  type     SocialType // ví dụ: 'facebook', 'instagram', 'zalo', 'tiktok'
  url      String
  storeId  Int
  store    Store  @relation("StoreToSocial",fields: [storeId], references: [id])

  @@index([storeId])
  @@unique([type, storeId]) // mỗi loại mạng xã hội chỉ nên có 1 bản ghi trên mỗi store
}



model News { 
   id          Int          @id @default(autoincrement())
   title String 
   slug String @unique 
   description   String   @db.Text
   imageUrl     String?  // URL ảnh đại diện của bài viết
   storeId   Int?  // Tin có thể không thuộc store nào (optional)
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
  // Quan hệ
   store Store? @relation("StoreToNews",fields: [storeId],references: [id])
   @@index([storeId])
}





// =============================================================================
// PRODUCT MANAGEMENT
// =============================================================================

model Brand  {
    id          Int          @id @default(autoincrement())
    name String @unique
    products Product[] //Danh sách các sản phẩm thuộc Brand này  
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  description String  @db.Text
  parentId    Int?
  imageUrl String 
  subCategories Category[] @relation("SubCategory")
  parentCategory Category? @relation("SubCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products    Product[]
  seo           SEO?      @relation("CategoryToSEO")
  variant CategoryVariant?
  storeId Int
  store Store @relation("StoreToCategories",fields: [storeId],references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([parentId])

  @@index([storeId])
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String @unique
  description String  @db.Text
  originalPrice Float?
  price       Float
  isFeatured Boolean @default(false)
  slug String @unique
  discount    Float @default(0)
  viewCount Int @default(0)
  ratingCount Int @default(0)
  orderItems OrderItem[]
  colors      ProductColor[]
  sizes       ProductSize[]
  stock       Int
  images      Image[]
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  brand       Brand?     @relation(fields: [brandId], references: [id])
  brandId     Int?
  reviews     Review[]


    // A: sản phẩm này có tặng quà nào không?
  giftProducts GiftProduct[] @relation("ProductWithGifts")

  // B: sản phẩm này có phải quà tặng của sản phẩm nào không?
  giftedIn     GiftProduct[] @relation("GiftedToProduct")

  

  sku         String? @unique
  seo           SEO?      @relation("ProductToSEO")
  storeId Int
  store Store @relation("StoreToProducts",fields: [storeId],references: [id])

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  

  @@index([categoryId])

  @@index([brandId])

  @@index([storeId])

}

model GiftProduct {
  id         Int     @id @default(autoincrement())

  productId Int  // ID của sản phẩm chính (sản phẩm đang bán)
  giftId    Int  // ID của sản phẩm được tặng kèm (quà)

  product   Product @relation("ProductWithGifts", fields: [productId], references: [id])
  gift      Product @relation("GiftedToProduct", fields: [giftId], references: [id])

  @@unique([productId, giftId])
  @@index([giftId])
}

//BẢNG TRUNG GIAN !!! (KHI XÓA CHI CHỈ CẦN XÓA BẢNG NÀY THÌ PRODUCT VÀ COLOR SẼ ĐƯỢC XÓA THEO)
model ProductColor {
  id         Int      @id @default(autoincrement())
  name       String
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  hex       String
  price      Float
  stock      Int

  @@index([productId])

}
//BẢNG TRUNG GIAN !!! (KHI XÓA CHI CHỈ CẦN XÓA BẢNG NÀY THÌ PRODUCT VÀ SIZE SẼ ĐƯỢC XÓA THEO)
model ProductSize {
  id         Int      @id @default(autoincrement())
  name       String
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  price      Float
  stock      Int
  @@index([productId])

}



// =============================================================================
// ORDER MANAGEMENT
// =============================================================================


model Order {
  id              Int           @id @default(autoincrement())
  user          User          @relation(fields: [userId], references: [id])
  userId        Int
  // address () // SAU NÀY BỔ SUNG THÊM PHẦN ĐỊA CHỈ 

  // Liên kết với bảng OrderItem
  total         Float         /// Tổng tiền

  status          OrderStatus   @default(ORDERED) //Default status là ORDERED (Đã đặt hàng !!!)
  items           OrderItem[]
  payment Payment?

  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
 

  @@index([userId])
}
model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int      @default(1)
  unitPrice Float
  subtotal  Float    @default(0)
  productId Int
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])


  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@index([productId])
  @@index([orderId])
}




model Payment {
  id               Int           @id @default(autoincrement())
  method           PaymentMethod
  status           PaymentStatus @default(PENDING)
  isPaid           Boolean       @default(false)

  // Thông tin chuyển khoản
  bankName         String?       // Tên ngân hàng (nếu chuyển khoản)
  payerName        String?       // Tên người chuyển
  transactionId    String?       // Mã giao dịch

  // Khóa ngoại liên kết với đơn hàng
  orderId          Int           @unique
  order            Order         @relation(fields: [orderId], references: [id])

  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}


// =============================================================================
// SHOPPING CART
// =============================================================================

model Cart { 
  id          Int           @id @default(autoincrement())
    user      User       @relation(fields: [userId], references: [id])
    userId Int @unique
    items CartItem[]
}
model CartItem {
  id          Int           @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  productId Int
  quantity  Int      /// Số lượng đặt
  @@index([cartId])
}


// =============================================================================
// WISHLIST
// =============================================================================
model Wishlist { 
  id         Int           @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int     @unique
  items WishlistItem[]

}
model WishlistItem  {
    id         Int           @id @default(autoincrement())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId Int
  productId  Int
  addedAt    DateTime @default(now())


  @@index([wishlistId])
}


// =============================================================================
// REVIEWS
// =============================================================================

model Review {
  id         Int           @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  rating    Int      /// Điểm đánh giá (1-5)
  comment   String?  /// Nhận xét (tùy chọn)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([productId])
}




// =============================================================================
// CMS & SEO
// =============================================================================

model Banner {
  id        Int      @id @default(autoincrement())
  storeId   Int
  store Store @relation("StoreToBanner",fields: [storeId],references: [id])

  imageUrl     String
  link      String?
  title     String?
  description String?
  position    Int       @default(1) // Luôn có giá trị, không để mặc định là 0 (Là vị trí đầu tiên khi thêm mới )
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model SEO {
  id              Int      @id @default(autoincrement()) // ID của SEO
  title           String   // Tiêu đề SEO
  description     String   // Mô tả SEO
  keywords        String   // Từ khóa SEO (dạng chuỗi, có thể phân tách bằng dấu phẩy)
  openGraphTitle  String?  // Tiêu đề OpenGraph (cho chia sẻ mạng xã hội)
  openGraphDescription String? // Mô tả OpenGraph
  openGraphImage  String?  // Hình ảnh OpenGraph
 
  url             String   // URL của đối tượng (Product, Category, Blog)
  productId       Int? @unique    // Khóa ngoại tới Product
  categoryId         Int?     @unique
  
  product           Product? @relation("ProductToSEO", fields: [productId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  category           Category? @relation("CategoryToSEO", fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  createdAt       DateTime @default(now()) // Thời gian tạo
  updatedAt       DateTime @updatedAt      // Thời gian cập nhật

  
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  @@index([productId])
}